# Copyright 2019 Farzad Senart and Lionel Suss. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ic import aws

TYPES = dict(
    binary="B",
    boolean="BOOL",
    binary_set="BS",
    list="L",
    map="M",
    number="N",
    number_set="NS",
    null="NULL",
    string="S",
    string_set="SS",
)


@resource
def brick(part_key, sort_key=None, *, stream=None, scaling=None):
    name, typ = part_key[0], TYPES[part_key[1]]
    key_schema = [dict(attribute_name=name, key_type="HASH")]
    attrs_defs = [dict(attribute_name=name, attribute_type=typ)]
    if sort_key:
        name, typ = sort_key[0], TYPES[sort_key[1]]
        key_schema.append(dict(attribute_name=name, key_type="RANGE"))
        attrs_defs.append(dict(attribute_name=name, attribute_type=typ))
    props = dict(key_schema=key_schema, attribute_definitions=attrs_defs)
    if scaling is not None:
        scaling.setdefault("read", {}).setdefault("min", 5)
        scaling.setdefault("write", {}).setdefault("min", 5)
        props.update(
            billing_mode="PROVISIONED",
            provisioned_throughput=dict(
                read_capacity_units=scaling["read"]["min"],
                write_capacity_units=scaling["write"]["min"],
            ),
        )
    else:
        props.update(billing_mode="PAY_PER_REQUEST")
    if stream:
        props.update(stream_specification=dict(stream_view_type=stream))
    table = aws.dynamodb.table("table", **props)
    if scaling is not None:
        _scaling("scaling", table, scaling)
    return table


@resource
def _scaling(table, config):
    role = aws.iam.role(
        "role",
        assume_role_policy_document=dict(
            Version="2012-10-17",
            Statement=dict(
                Effect="Allow",
                Principal=dict(
                    Service="dynamodb.application-autoscaling.amazonaws.com"
                ),
                Action="sts:AssumeRole",
            ),
        ),
        policies=[
            dict(
                policy_name="manage_table",
                policy_document=dict(
                    Statement=dict(
                        Effect="Allow",
                        Resource=table["arn"],
                        Action=["dynamodb:DescribeTable", "dynamodb:UpdateTable"],
                    )
                ),
            ),
            dict(
                policy_name="manage_alarms",
                policy_document=dict(
                    Statement=dict(
                        Effect="Allow",
                        Resource="*",
                        Action=[
                            "cloudwatch:PutMetricAlarm",
                            "cloudwatch:DescribeAlarms",
                            "cloudwatch:DeleteAlarms",
                        ],
                    )
                ),
            ),
        ],
    )
    for mode in {"read", "write"}:
        __scaling(mode, table, role, mode.title(), **config[mode])


@resource
def __scaling(table, role, dim, *, min, max=40000, target=70, **kwargs):
    scalable_target = aws.application_auto_scaling.scalable_target(
        "target",
        min_capacity=min,
        max_capacity=max,
        service_namespace="dynamodb",
        scalable_dimension=f"dynamodb:table:{dim}CapacityUnits",
        resource_id=f"table/{table['ref']}",
        role_arn=role["arn"],
    )
    aws.application_auto_scaling.scaling_policy(
        "policy",
        policy_name=f"{dim}Capacity",
        policy_type="TargetTrackingScaling",
        scaling_target_id=scalable_target["ref"],
        target_tracking_scaling_policy_configuration=dict(
            predefined_metric_specification=dict(
                predefined_metric_type=f"DynamoDB{dim}CapacityUtilization"
            ),
            target_value=target,
            **kwargs,
        ),
    )
